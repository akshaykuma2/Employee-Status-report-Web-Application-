{"ast":null,"code":"import axios from 'axios';\n\nclass APIHandler {\n  constructor() {\n    this.setAccessToken = token => {\n      this.axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    };\n\n    this.getAccessToken = () => {\n      return this.axios.defaults.headers.common.Authorization.split(' ')[1];\n    };\n\n    this.login = async (username, password, type) => {\n      const data = {\n        email: username,\n        password\n      };\n\n      try {\n        const response = await this.axios.post(`/api/login/${type}`, data);\n        return response.data;\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.signUp = async (username, password) => {\n      try {\n        const data = {\n          email: username,\n          password,\n          username\n        };\n        const response = await this.axios.post('/api/employee', data);\n        return response.data;\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.getEmployeeList = async params => {\n      try {\n        const employeeResponse = await this.axios.get('/api/employee');\n        return employeeResponse.data.data;\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    this.getAdminData = async params => {\n      try {\n        const employeeResponse = await this.axios.get('/api/employee');\n        const projectResponse = await this.axios.get('/api/project');\n        return projectResponse.data.data.map((datas, index) => {\n          const getName = employeeResponse.data.data.find(data => datas.assignedTo == data.id);\n          const merge = {\n            id: datas.id,\n            name: getName ? getName.username : '',\n            title: datas.title,\n            description: datas.description,\n            date: datas.timeline\n          };\n          return merge;\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    this.getEmployee = async id => {\n      try {\n        const response = await this.axios.get(`/api/employee/project/${id}`);\n        return response.data.data.map((datas, index) => {\n          const merge = {\n            id: datas.id,\n            title: datas.title,\n            description: datas.description,\n            date: datas.timeline\n          };\n          return merge;\n        });\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.editTask = async list => {\n      try {\n        const data = {\n          description: list.description\n        };\n        const response = await this.axios.put(`/api/employee/project/edit/${list.projectId}`, data);\n        return response.data;\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.addTask = async list => {\n      try {\n        const data = {\n          title: list.projectName,\n          description: list.description,\n          timeline: list.date,\n          assignedTo: list.employeeId\n        };\n        const response = await this.axios.post(`/api/project`, data);\n        return response.data;\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.deleteTask = async id => {\n      try {\n        const response = await this.axios.delete(`/api/employee/project/delete/${id}`);\n        return response.data;\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    this.axios = axios.create({\n      baseURL: 'http://localhost:5000',\n      headers: {\n        Accept: '*/*',\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n}\n\nconst API = new APIHandler();\nexport default API;","map":{"version":3,"sources":["C:/new project/akshay/file/Send12/src/api/index.js"],"names":["axios","APIHandler","constructor","setAccessToken","token","defaults","headers","common","Authorization","getAccessToken","split","login","username","password","type","data","email","response","post","error","Promise","reject","signUp","getEmployeeList","params","employeeResponse","get","e","getAdminData","projectResponse","map","datas","index","getName","find","assignedTo","id","merge","name","title","description","date","timeline","getEmployee","editTask","list","put","projectId","addTask","projectName","employeeId","deleteTask","delete","create","baseURL","Accept","API"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nclass APIHandler {\n  constructor() {\n    this.axios = axios.create({\n      baseURL: 'http://localhost:5000',\n      headers: {\n        Accept: '*/*',\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  setAccessToken = (token) => {\n    this.axios.defaults.headers.common.Authorization = `Bearer ${token}`\n  }\n\n  getAccessToken = () => {\n    return this.axios.defaults.headers.common.Authorization.split(' ')[1]\n  }\n\n  login = async (username,password,type) => {\n    const data = {\n      email: username,\n      password\n    }\n    try {\n      const response = await this.axios.post(`/api/login/${type}`, data)\n      return response.data\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  signUp = async (username,password) => {\n    try {\n\n      const data = {\n        email: username,\n        password,\n        username\n      }\n      const response = await this.axios.post('/api/employee', data)\n      return response.data\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  getEmployeeList = async (params) => {\n    try {\n    const employeeResponse = await this.axios.get('/api/employee')\n    return employeeResponse.data.data\n    } catch (e) {\n      return Promise.reject(e)\n    }\n  }\n\n  getAdminData = async (params) => {\n    try {\n    const employeeResponse = await this.axios.get('/api/employee')\n    const projectResponse = await this.axios.get('/api/project')\n    return projectResponse.data.data.map((datas, index) => {\n      const getName = employeeResponse.data.data.find(data => datas.assignedTo == data.id)\n      const merge = {\n        id: datas.id,\n        name: getName ? getName.username : '',\n        title: datas.title,\n        description: datas.description,\n        date: datas.timeline\n      }\n      return merge\n    })\n    } catch (e) {\n      return Promise.reject(e)\n    }\n  }\n\n  getEmployee = async (id) => {\n    try {\n    const response = await this.axios.get(`/api/employee/project/${id}`)\n    return response.data.data.map((datas, index) => {\n      const merge = {\n        id: datas.id,\n        title: datas.title,\n        description: datas.description,\n        date: datas.timeline\n        }\n      return merge\n    })\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  editTask = async (list) => {\n    try {\n      const data = {\n        description: list.description\n      }\n      const response = await this.axios.put(`/api/employee/project/edit/${list.projectId}`,data)\n      return response.data\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  addTask = async (list) => {\n    try {\n      const data = {\n        title: list.projectName,\n        description: list.description,\n        timeline: list.date,\n        assignedTo: list.employeeId,\n      }\n      const response = await this.axios.post(`/api/project`, data)\n      return response.data\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  deleteTask = async (id) => {\n    try {\n      const response = await this.axios.delete(`/api/employee/project/delete/${id}`)\n      return response.data\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n}\n\nconst API = new APIHandler()\n\nexport default API\n"]},"metadata":{},"sourceType":"module"}